{"version":3,"sources":["data/data.yaml","data/kanjidic2_indexed_0.yaml","data/kanjidic2_indexed_1.yaml","data/kanjidic2_indexed_2.yaml","data/kanjidic2_indexed_3.yaml","data/kanjidic2_indexed_4.yaml","data/kanjidic2_indexed_5.yaml","data/kanjidic2_indexed_6.yaml","data/kanjidic2_indexed_7.yaml","data/kanjidic2_indexed_8.yaml","data/kanjidic2_indexed_9.yaml","data/kanjidic2_indexed_10.yaml","data/kanjidic2_indexed_11.yaml","data/kanjidic2_indexed_12.yaml","data/kanjidic2_indexed_13.yaml","data/kanjidic2_indexed_14.yaml","http.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","xhr","method","url","Promise","resolve","reject","req","XMLHttpRequest","withCredentials","addEventListener","status","open","send","kanjidic2_files","kanjidic2_00","kanjidic2_01","kanjidic2_02","kanjidic2_03","kanjidic2_04","kanjidic2_05","kanjidic2_06","kanjidic2_07","kanjidic2_08","kanjidic2_09","kanjidic2_10","kanjidic2_11","kanjidic2_12","kanjidic2_13","kanjidic2_14","Kanji","s","d","literal","dicEntry","this","KanjiDic","data","forEach","file","then","dict","yaml","load","response","Object","keys","key","catch","err","console","error","lookup","Container","styled","div","ListenContainer","span","Title","h1","BigButton","button","App","props","recognition","kanjiDic","log","state","src","stopTimes","lastListenResults","anyWindow","window","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","lang","interimResults","maxAlternatives","onresult","event","listenCallback","player","playVideo","forceUpdate","pauseVideo","dir","results","length","listenResults","Array","from","map","x","transcript","tokens","wanakana","token","kanji","getKanji","setState","start","time","getCurrentTime","maxTime","getDuration","stopTime","timer","clearTimeout","nextStop","getNextStopTime","remainingTime","getPlaybackRate","setTimeout","pause","target","label","onClick","play","getPlayerState","empty","lastResults","listItems","listen","opts","width","height","playerVars","autoplay","videoId","onStateChange","onPlayerStateChange","onReady","onPlayerReady","renderContinueButton","renderListener","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fbc21e06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/data.7afd0079.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_0.02ab68d4.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_1.e66cd891.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_2.93d75634.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_3.6fcd9b2c.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_4.1bddbbb0.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_5.3f1c5526.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_6.5ac50b4d.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_7.1fd2d205.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_8.338edfbd.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_9.f2417162.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_10.e9781bfc.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_11.9f275a4f.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_12.d4403ff5.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_13.ef2cddef.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_14.3654ae15.yaml\";","export default function xhr(method: string, url: string): Promise<XMLHttpRequest> {\n  return new Promise<XMLHttpRequest>((resolve, reject) => {\n    const req = new XMLHttpRequest();\n    req.withCredentials = true;\n    req.addEventListener('load', () => {\n      if(req.status === 200) resolve(req);\n      else reject(req);\n    });\n    req.addEventListener('error', () => { reject(req) });\n    req.addEventListener('abort', () => { reject(req) });\n    req.open(method, url);\n    req.send();\n  });\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport yaml from 'js-yaml';\nimport YouTube from 'react-youtube';\nimport * as wanakana from 'wanakana';\n\nimport xhr from './http';\n\nimport data from './data/data.yaml';\n\nimport kanjidic2_00 from './data/kanjidic2_indexed_0.yaml';\nimport kanjidic2_01 from './data/kanjidic2_indexed_1.yaml';\nimport kanjidic2_02 from './data/kanjidic2_indexed_2.yaml';\nimport kanjidic2_03 from './data/kanjidic2_indexed_3.yaml';\nimport kanjidic2_04 from './data/kanjidic2_indexed_4.yaml';\nimport kanjidic2_05 from './data/kanjidic2_indexed_5.yaml';\nimport kanjidic2_06 from './data/kanjidic2_indexed_6.yaml';\nimport kanjidic2_07 from './data/kanjidic2_indexed_7.yaml';\nimport kanjidic2_08 from './data/kanjidic2_indexed_8.yaml';\nimport kanjidic2_09 from './data/kanjidic2_indexed_9.yaml';\nimport kanjidic2_10 from './data/kanjidic2_indexed_10.yaml';\nimport kanjidic2_11 from './data/kanjidic2_indexed_11.yaml';\nimport kanjidic2_12 from './data/kanjidic2_indexed_12.yaml';\nimport kanjidic2_13 from './data/kanjidic2_indexed_13.yaml';\nimport kanjidic2_14 from './data/kanjidic2_indexed_14.yaml';\nconst kanjidic2_files = [\n  kanjidic2_00,\n  kanjidic2_01,\n  kanjidic2_02,\n  kanjidic2_03,\n  kanjidic2_04,\n  kanjidic2_05,\n  kanjidic2_06,\n  kanjidic2_07,\n  kanjidic2_08,\n  kanjidic2_09,\n  kanjidic2_10,\n  kanjidic2_11,\n  kanjidic2_12,\n  kanjidic2_13,\n  kanjidic2_14,\n];\n\ninterface TextType {\n  text: string;\n  typ: string;\n}\n\ninterface Codepoint {\n  cp_value: TextType[];\n}\n\ninterface DicNumber {\n  dic_ref: TextType[];\n}\n\ninterface Radical {\n  rad_value: TextType[];\n}\n\ninterface Misc {\n  stroke_count: string[];\n  variant?: TextType[];\n}\n\ninterface ReadingMeaning {\n  meaning: string[];\n  reading: TextType[];\n}\n\ninterface RMGroup {\n  rmgroup: ReadingMeaning[];\n}\n\ninterface DicEntry {\n  codepoint: Codepoint;\n  dic_number: DicNumber;\n  literal: string;\n  misc: Misc;\n  radical: Radical;\n  reading_meaning: RMGroup;\n}\n\nclass Kanji {\n  public readonly literal: string;\n  public readonly dicEntry: DicEntry;\n  constructor(s: string, d: DicEntry) {\n    this.literal = s;\n    this.dicEntry = d;\n  }\n}\n\nclass KanjiDic {\n  private data: Record<string, DicEntry> = {};\n  \n  constructor() {\n    kanjidic2_files.forEach((file) => {\n      xhr('GET', file).then((req) => {\n        const dict = yaml.load(req.response);\n        Object.keys(dict).forEach((key: string) => this.data[key] = dict[key]);\n      }).catch((err) => console.error(`Error loading ${file}`, err))\n    })\n  }\n\n  lookup(key: string): DicEntry | undefined {\n    return this.data[key];\n  }\n\n  getKanji(key: string): Kanji | undefined {\n    let dicEntry = this.lookup(key);\n    if (!dicEntry) { return undefined; }\n    return new Kanji(key, dicEntry);\n  }\n}\n\nconst Container = styled.div`\n  @media screen and (min-width: 60rem) {\n  width: 60rem;\n  margin: 0 auto;\n  }\n`;\n\nconst ListenContainer = styled.span``;\n\nconst Title = styled.h1`\n  padding-left: 1rem;\n  font-size: 1.5em;\n  color: orangered;\n`;\n\nconst BigButton = styled.button`\n  font-size: 2rem;\n  width: 100%;\n`;\n\n// @types/youtube won't let me refer to their const enum PlayerState\n// directly, so I have to recreate its values here\n//const PlayerStateUnstarted = -1;\n//const PlayerStateEnded = 0;\nconst PlayerStatePlaying = 1;\n//const PlayerStatePaused = 2;\n//const PlayerStateBuffering = 3;\n//const PlayerStateCued = 4;\n\ninterface AppState {\n  player?: YT.Player;\n  src: string;\n  stopTimes: number[];\n  timer?: any;\n\n  lastListenResults: string[];\n};\n\nclass App extends React.Component<{},AppState> {\n  private recognition?: any;\n  private kanjiDic = new KanjiDic();\n\n  constructor(props: {}) {\n    super(props);\n    console.log('new App()');\n\n    // Start async get call\n    xhr('GET', data).then((req) => {\n      yaml.load(req.response);\n      // TODO\n    }).catch((err) => console.error(err));\n\n    \n\n    this.state = {\n      src: 'FsiAxc5T23g',\n      stopTimes: [165, 178],\n      lastListenResults: [],\n    };\n\n    const anyWindow: any = window;\n    if (anyWindow.SpeechRecognition || anyWindow.webkitSpeechRecognition ||\n        anyWindow.mozSpeechRecognition || anyWindow.msSpeechRecognition) {\n      this.recognition = new (anyWindow.SpeechRecognition || anyWindow.webkitSpeechRecognition ||\n                              anyWindow.mozSpeechRecognition || anyWindow.msSpeechRecognition)();\n      this.recognition.lang = 'ja-JP';\n      this.recognition.interimResults = false;\n      this.recognition.maxAlternatives = 5;\n\n      this.recognition.onresult = (event: SpeechRecognitionEvent) => this.listenCallback(event);\n    }\n  }\n\n  play() {\n    this.state.player?.playVideo();\n    this.forceUpdate();\n  }\n\n  pause() {\n    this.state.player?.pauseVideo();\n    this.forceUpdate();\n  }\n\n  listenCallback(event: SpeechRecognitionEvent) {\n    console.log('listenCallback');\n    console.dir(event);\n    if (event.results.length > 0) {\n      const listenResults = Array.from(event.results[0]).map((x: any) => {\n        const transcript = x.transcript;\n\n        const tokens = wanakana.tokenize(transcript);\n        console.dir(tokens);\n        const kanji_tokens = tokens.map((token) => {\n          if (wanakana.isKanji(token)) {\n            const kanji = this.kanjiDic.getKanji(token);\n            if (kanji) return kanji;\n          }\n          return token;\n        });\n        kanji_tokens.forEach(console.dir);\n\n        return transcript;\n      });\n      this.setState({\n        src: this.state.src,\n        stopTimes: this.state.stopTimes,\n        lastListenResults: listenResults,\n      });\n    }\n  }\n\n  listen() {\n    this.recognition.start();\n  }\n\n  getNextStopTime() {\n    let time = this.state.player?.getCurrentTime() || 0;\n    let maxTime = this.state.player?.getDuration() || 0;\n    for (let stopTime of this.state.stopTimes) {\n      if (time < stopTime) {\n        return stopTime;\n      }\n    }\n    return maxTime;\n  }\n\n  onPlayerStateChange(event: YT.OnStateChangeEvent) {\n    if (this.state.timer) {\n      clearTimeout(this.state.timer);\n    }\n    if (event.data === PlayerStatePlaying) {\n      let time = this.state.player?.getCurrentTime() || 0;\n      let nextStop = this.getNextStopTime();\n      // Add .4 of a second to the time in case it's close to the current time\n      // (The API kept returning ~9.7 when hitting play after stopping at 10s)\n      if (time + .4 < nextStop) {\n        let rate = this.state.player?.getPlaybackRate() || 1;\n        let remainingTime = (nextStop - time) / rate;\n        this.setState({\n          src: this.state.src,\n          stopTimes: this.state.stopTimes,\n          timer: setTimeout(() => this.pause(), remainingTime * 1000),\n        });\n      }\n    } else {\n      this.setState({\n        timer: null,\n      });\n    }\n  }\n\n  onPlayerReady(event: YT.PlayerEvent) {\n    this.setState({player: event.target});\n  }\n\n  renderContinueButton() {\n    let label = 'Continue ->';\n    let onClick = () => this.play();\n    if (this.state.player?.getPlayerState() === PlayerStatePlaying) {\n      label = 'Pause ||';\n      onClick = () => this.pause();\n    }\n    return (\n      <BigButton onClick={onClick}>\n        { label }\n      </BigButton>\n    );\n  }\n\n  renderListener() {\n    const empty = (<span></span>);\n    if (!this.recognition) {\n      return empty;\n    }\n    let lastResults = empty;\n    if (this.state.lastListenResults.length === 1) {\n      lastResults = (\n        <p>\n        { this.state.lastListenResults[0] }\n        </p>\n      );\n    } else if (this.state.lastListenResults.length > 1) {\n      const listItems = Array.from(this.state.lastListenResults).map((s: string) => (\n        <li key={s}>{s}</li>\n      ));\n      lastResults = (\n        <ol>{ listItems }</ol>\n      );\n    }\n    return (\n      <ListenContainer>\n        <BigButton onClick={() => this.listen() }>\n          Listen\n        </BigButton>\n        { lastResults }\n      </ListenContainer>\n    );    \n  }\n\n  render() {\n    const zero: 0 | 1 | undefined = 0;\n    const opts = {\n      width: '960',\n      height: '473',\n      playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: zero,\n        // TODO: In the final build, uncomment the next line\n        //controls: zero,\n        start: 70,\n      },\n    };\n\n    return (\n      <Container>\n        <header>\n          <Title>\n            T.P.R.S. 日本語\n          </Title>\n        </header>\n        <YouTube videoId={this.state.src} opts={opts}\n                 onStateChange={(event: YT.OnStateChangeEvent) => this.onPlayerStateChange(event) }\n                 onReady={(event: YT.PlayerEvent) => this.onPlayerReady(event)} />\n        { this.renderContinueButton() }\n        { this.renderListener() }\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}