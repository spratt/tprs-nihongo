{"version":3,"sources":["data.yaml","App.tsx","http.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","Container","styled","div","ListenContainer","span","Title","h1","BigButton","button","App","props","method","url","recognition","console","log","data","Promise","resolve","reject","req","XMLHttpRequest","withCredentials","addEventListener","status","open","send","then","yaml","load","response","catch","err","error","state","src","stopTimes","lastListenResults","anyWindow","window","webkitSpeechRecognition","lang","interimResults","maxAlternatives","onresult","event","listenCallback","this","player","playVideo","forceUpdate","pauseVideo","dir","results","length","listenResults","Array","from","map","x","transcript","kana","wanakana","setState","start","time","getCurrentTime","maxTime","getDuration","stopTime","timer","clearTimeout","nextStop","getNextStopTime","remainingTime","getPlaybackRate","setTimeout","pause","target","label","onClick","play","getPlayerState","empty","lastResults","listItems","s","listen","opts","width","height","playerVars","autoplay","videoId","onStateChange","onPlayerStateChange","onReady","onPlayerReady","renderContinueButton","renderListener","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0c3139f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/data.7afd0079.yaml\";","import React from 'react';\nimport styled from 'styled-components';\nimport yaml from 'js-yaml';\nimport YouTube from 'react-youtube';\nimport * as wanakana from 'wanakana';\n\nimport xhr from './http';\n\nimport data from './data.yaml';\n\nconst Container = styled.div`\n  @media screen and (min-width: 60rem) {\n  width: 60rem;\n  margin: 0 auto;\n  }\n`;\n\nconst ListenContainer = styled.span``;\n\nconst Title = styled.h1`\n  padding-left: 1rem;\n  font-size: 1.5em;\n  color: orangered;\n`;\n\nconst BigButton = styled.button`\n  font-size: 2rem;\n  width: 100%;\n`;\n\ninterface AppState {\n  player?: YT.Player;\n  src: string;\n  stopTimes: number[];\n  timer?: any;\n\n  lastListenResults: string[];\n};\n\n// @types/youtube won't let me refer to their const enum PlayerState\n// directly, so I have to recreate its values here\n//const PlayerStateUnstarted = -1;\n//const PlayerStateEnded = 0;\nconst PlayerStatePlaying = 1;\n//const PlayerStatePaused = 2;\n//const PlayerStateBuffering = 3;\n//const PlayerStateCued = 4;\n\nclass App extends React.Component<{},AppState> {\n  private recognition?: any;\n\n  constructor(props: {}) {\n    super(props);\n    console.log('new App()');\n\n    // Start async get call\n    xhr('GET', data).then((req) => {\n      yaml.load(req.response);\n      // TODO\n    }).catch((err) => console.error(err));\n\n    this.state = {\n      src: 'FsiAxc5T23g',\n      stopTimes: [165, 178],\n      lastListenResults: [],\n    };\n\n    const anyWindow: any = window;\n    if (anyWindow.webkitSpeechRecognition) {\n      this.recognition = new anyWindow.webkitSpeechRecognition();\n      this.recognition.lang = 'ja-JP';\n      this.recognition.interimResults = false;\n      this.recognition.maxAlternatives = 5;\n\n      this.recognition.onresult = (event: SpeechRecognitionEvent) => this.listenCallback(event);\n    }\n  }\n\n  play() {\n    this.state.player?.playVideo();\n    this.forceUpdate();\n  }\n\n  pause() {\n    this.state.player?.pauseVideo();\n    this.forceUpdate();\n  }\n\n  listenCallback(event: SpeechRecognitionEvent) {\n    console.log('listenCallback');\n    console.dir(event);\n    if (event.results.length > 0) {\n      const listenResults = Array.from(event.results[0]).map((x: any) => {\n        const transcript = x.transcript;\n        const kana = wanakana.toKana(transcript);\n        console.log(`${transcript}(${kana})`);\n        if (kana === transcript) {\n          return transcript;\n        }\n        return `${transcript}(${kana})`;\n      });\n      this.setState({\n        src: this.state.src,\n        stopTimes: this.state.stopTimes,\n        lastListenResults: listenResults,\n      });\n    }\n  }\n\n  listen() {\n    this.recognition.start();\n  }\n\n  getNextStopTime() {\n    let time = this.state.player?.getCurrentTime() || 0;\n    let maxTime = this.state.player?.getDuration() || 0;\n    for (let stopTime of this.state.stopTimes) {\n      if (time < stopTime) {\n        return stopTime;\n      }\n    }\n    return maxTime;\n  }\n\n  onPlayerStateChange(event: YT.OnStateChangeEvent) {\n    if (this.state.timer) {\n      clearTimeout(this.state.timer);\n    }\n    if (event.data === PlayerStatePlaying) {\n      let time = this.state.player?.getCurrentTime() || 0;\n      let nextStop = this.getNextStopTime();\n      // Add .4 of a second to the time in case it's close to the current time\n      // (The API kept returning ~9.7 when hitting play after stopping at 10s)\n      if (time + .4 < nextStop) {\n        let rate = this.state.player?.getPlaybackRate() || 1;\n        let remainingTime = (nextStop - time) / rate;\n        this.setState({\n          src: this.state.src,\n          stopTimes: this.state.stopTimes,\n          timer: setTimeout(() => this.pause(), remainingTime * 1000),\n        });\n      }\n    } else {\n      this.setState({\n        timer: null,\n      });\n    }\n  }\n\n  onPlayerReady(event: YT.PlayerEvent) {\n    this.setState({player: event.target});\n  }\n\n  renderContinueButton() {\n    let label = 'Continue ->';\n    let onClick = () => this.play();\n    if (this.state.player?.getPlayerState() === PlayerStatePlaying) {\n      label = 'Pause ||';\n      onClick = () => this.pause();\n    }\n    return (\n      <BigButton onClick={onClick}>\n        { label }\n      </BigButton>\n    );\n  }\n\n  renderListener() {\n    const empty = (<span></span>);\n    if (!this.recognition) {\n      return empty;\n    }\n    let lastResults = empty;\n    if (this.state.lastListenResults.length === 1) {\n      lastResults = (\n        <p>\n        { this.state.lastListenResults[0] }\n        </p>\n      );\n    } else if (this.state.lastListenResults.length > 1) {\n      const listItems = Array.from(this.state.lastListenResults).map((s: string) => (<li>{s}</li>));\n      lastResults = (\n        <ol>{ listItems }</ol>\n      );\n    }\n    return (\n      <ListenContainer>\n        <BigButton onClick={() => this.listen() }>\n          Listen\n        </BigButton>\n        { lastResults }\n      </ListenContainer>\n    );    \n  }\n\n  render() {\n    const zero: 0 | 1 | undefined = 0;\n    const opts = {\n      width: '960',\n      height: '473',\n      playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: zero,\n        // TODO: In the final build, uncomment the next line\n        //controls: zero,\n        start: 70,\n      },\n    };\n\n    return (\n      <Container>\n        <header>\n          <Title>\n            T.P.R.S. 日本語\n          </Title>\n        </header>\n        <YouTube videoId={this.state.src} opts={opts}\n                 onStateChange={(event: YT.OnStateChangeEvent) => this.onPlayerStateChange(event) }\n                 onReady={(event: YT.PlayerEvent) => this.onPlayerReady(event)} />\n        { this.renderContinueButton() }\n        { this.renderListener() }\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","export default function xhr(method: string, url: string): Promise<XMLHttpRequest> {\n  return new Promise<XMLHttpRequest>((resolve, reject) => {\n    const req = new XMLHttpRequest();\n    req.withCredentials = true;\n    req.addEventListener('load', () => {\n      if(req.status === 200) resolve(req);\n      else reject(req);\n    });\n    req.addEventListener('error', () => { reject(req) });\n    req.addEventListener('abort', () => { reject(req) });\n    req.open(method, url);\n    req.send();\n  });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}