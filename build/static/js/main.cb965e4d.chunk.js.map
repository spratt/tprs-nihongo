{"version":3,"sources":["data/kanjidic2_indexed_0.yaml","data/kanjidic2_indexed_1.yaml","data/kanjidic2_indexed_2.yaml","data/kanjidic2_indexed_3.yaml","data/kanjidic2_indexed_4.yaml","data/kanjidic2_indexed_5.yaml","data/kanjidic2_indexed_6.yaml","data/kanjidic2_indexed_7.yaml","data/kanjidic2_indexed_8.yaml","data/kanjidic2_indexed_9.yaml","data/kanjidic2_indexed_10.yaml","data/kanjidic2_indexed_11.yaml","data/kanjidic2_indexed_12.yaml","data/kanjidic2_indexed_13.yaml","data/kanjidic2_indexed_14.yaml","data/data.yaml","SpeechRecognizer.tsx","http.ts","KanjiDic.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SpeechRecognizer","callback","recognition","isStarted","anyWindow","window","this","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","lang","interimResults","maxAlternatives","onresult","stop","start","xhr","method","url","Promise","resolve","reject","req","XMLHttpRequest","withCredentials","addEventListener","status","open","send","kanjidic2_files","kanjidic2_00","kanjidic2_01","kanjidic2_02","kanjidic2_03","kanjidic2_04","kanjidic2_05","kanjidic2_06","kanjidic2_07","kanjidic2_08","kanjidic2_09","kanjidic2_10","kanjidic2_11","kanjidic2_12","kanjidic2_13","kanjidic2_14","BigSpan","styled","span","Kanji","props","readings","_","dicEntry","reading_meaning","rmgroup","reading","best_reading","literal","length","text","KanjiDic","data","forEach","file","then","dict","yaml","load","response","Object","keys","key","catch","err","console","error","s","lookup","wanakana","map","token","Array","from","c","renderString","flat","Container","div","ListenContainer","Title","h1","BigButton","button","HalfButton","firstVideo","series","lesson","name","author","src","startTime","stopTimes","App","recognizer","kanjiDic","mounted","log","setState","state","video","isListening","lastListenResults","videos","isPossible","event","listenCallback","player","playVideo","forceUpdate","pauseVideo","results","listenResults","x","transcript","hasStarted","time","getCurrentTime","maxTime","getDuration","stopTime","timer","clearTimeout","nextStop","getNextStopTime","remainingTime","getPlaybackRate","setTimeout","pause","target","label","onClick","play","getPlayerState","phrases","phrase","makePhrase","listenLabel","listen","opts","width","height","playerVars","autoplay","controls","videoId","onStateChange","onPlayerStateChange","onReady","onPlayerReady","prevVideo","nextVideo","renderContinueButton","renderListener","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cb965e4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_0.02ab68d4.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_1.e66cd891.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_2.93d75634.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_3.6fcd9b2c.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_4.1bddbbb0.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_5.3f1c5526.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_6.5ac50b4d.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_7.1fd2d205.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_8.338edfbd.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_9.f2417162.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_10.e9781bfc.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_11.9f275a4f.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_12.d4403ff5.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_13.ef2cddef.yaml\";","module.exports = __webpack_public_path__ + \"static/media/kanjidic2_indexed_14.3654ae15.yaml\";","module.exports = __webpack_public_path__ + \"static/media/data.e35f4554.yaml\";","export class SpeechRecognizer {\n  static isPossible(): boolean {\n    const anyWindow: any = window;\n    return anyWindow.SpeechRecognition || anyWindow.webkitSpeechRecognition ||\n           anyWindow.mozSpeechRecognition || anyWindow.msSpeechRecognition;\n  }\n\n  private recognition: any;\n  private isStarted: boolean;\n\n  constructor(callback: (event: SpeechRecognitionEvent) => void) {\n    const anyWindow: any = window;\n    this.recognition = new (anyWindow.SpeechRecognition || anyWindow.webkitSpeechRecognition ||\n                            anyWindow.mozSpeechRecognition || anyWindow.msSpeechRecognition)();\n    this.recognition.lang = 'ja-JP';\n    this.recognition.interimResults = false;\n    this.recognition.maxAlternatives = 5;\n    this.recognition.onresult = callback;\n\n    this.isStarted = false;\n  }\n\n  start() {\n    if (this.isStarted) {\n      this.isStarted = false;\n      this.recognition.stop();\n    } else {\n      this.isStarted = true;\n      this.recognition.start();\n    }\n  }\n\n  hasStarted(): boolean { return this.isStarted }\n}\n","export default function xhr(method: string, url: string): Promise<XMLHttpRequest> {\n  return new Promise<XMLHttpRequest>((resolve, reject) => {\n    const req = new XMLHttpRequest();\n    req.withCredentials = true;\n    req.addEventListener('load', () => {\n      if(req.status === 200) resolve(req);\n      else reject(req);\n    });\n    req.addEventListener('error', () => { reject(req) });\n    req.addEventListener('abort', () => { reject(req) });\n    req.open(method, url);\n    req.send();\n  });\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport yaml from 'js-yaml';\nimport * as wanakana from 'wanakana';\nimport * as _ from 'lodash';\n\nimport xhr from './http';\n\nimport kanjidic2_00 from './data/kanjidic2_indexed_0.yaml';\nimport kanjidic2_01 from './data/kanjidic2_indexed_1.yaml';\nimport kanjidic2_02 from './data/kanjidic2_indexed_2.yaml';\nimport kanjidic2_03 from './data/kanjidic2_indexed_3.yaml';\nimport kanjidic2_04 from './data/kanjidic2_indexed_4.yaml';\nimport kanjidic2_05 from './data/kanjidic2_indexed_5.yaml';\nimport kanjidic2_06 from './data/kanjidic2_indexed_6.yaml';\nimport kanjidic2_07 from './data/kanjidic2_indexed_7.yaml';\nimport kanjidic2_08 from './data/kanjidic2_indexed_8.yaml';\nimport kanjidic2_09 from './data/kanjidic2_indexed_9.yaml';\nimport kanjidic2_10 from './data/kanjidic2_indexed_10.yaml';\nimport kanjidic2_11 from './data/kanjidic2_indexed_11.yaml';\nimport kanjidic2_12 from './data/kanjidic2_indexed_12.yaml';\nimport kanjidic2_13 from './data/kanjidic2_indexed_13.yaml';\nimport kanjidic2_14 from './data/kanjidic2_indexed_14.yaml';\nconst kanjidic2_files = [\n  kanjidic2_00,\n  kanjidic2_01,\n  kanjidic2_02,\n  kanjidic2_03,\n  kanjidic2_04,\n  kanjidic2_05,\n  kanjidic2_06,\n  kanjidic2_07,\n  kanjidic2_08,\n  kanjidic2_09,\n  kanjidic2_10,\n  kanjidic2_11,\n  kanjidic2_12,\n  kanjidic2_13,\n  kanjidic2_14,\n];\n\nexport interface TextType {\n  text: string;\n  typ: string;\n}\n\nexport interface Codepoint {\n  cp_value: TextType[];\n}\n\nexport interface DicNumber {\n  dic_ref: TextType[];\n}\n\nexport interface Radical {\n  rad_value: TextType[];\n}\n\nexport interface Misc {\n  stroke_count: string[];\n  variant?: TextType[];\n}\n\nexport interface ReadingMeaning {\n  meaning: string[];\n  reading: TextType[];\n}\n\nexport interface RMGroup {\n  rmgroup: ReadingMeaning;\n}\n\nexport interface DicEntry {\n  codepoint: Codepoint;\n  dic_number: DicNumber;\n  literal: string;\n  misc: Misc;\n  radical: Radical;\n  reading_meaning: RMGroup;\n}\n\nconst BigSpan = styled.span`\n  font-size: 2rem;\n`;\n\nexport function Kanji(props: {dicEntry: DicEntry}) {\n  const readings = _.groupBy(props.dicEntry.reading_meaning.rmgroup.reading, 'typ');\n  let best_reading = props.dicEntry.literal;\n  if (readings['ja_kun'].length > 0) {\n    best_reading = readings['ja_kun'][0].text;\n  } else if (readings['ja_on'].length > 0) {\n    best_reading = readings['ja_on'][0].text;\n  }\n  return (\n    <BigSpan>\n      <ruby>\n        { props.dicEntry.literal }\n        <rt>{ best_reading }</rt>\n      </ruby>\n    </BigSpan>\n  );\n}\n\nexport class KanjiDic {\n  private data: Record<string, DicEntry> = {};\n  \n  constructor() {\n    kanjidic2_files.forEach((file) => {\n      xhr('GET', file).then((req) => {\n        const dict = yaml.load(req.response);\n        Object.keys(dict).forEach((key: string) => this.data[key] = dict[key]);\n      }).catch((err) => console.error(`Error loading ${file}`, err))\n    })\n  }\n\n  lookup(key: string): DicEntry | undefined {\n    return this.data[key];\n  }\n\n  renderString(s: string) {\n    let dicEntry = this.lookup(s);\n    if (dicEntry) {\n      return (\n        <Kanji dicEntry={dicEntry} />\n      );\n    }\n    return (\n      <BigSpan>{ s }</BigSpan>\n    );\n  }\n\n  makePhrase(s: string) {\n    return wanakana.tokenize(s).map((token) => {\n      if (wanakana.isKanji(token)) {\n        return Array.from(token).map((c) => this.renderString(c));\n      }\n      return (\n        <BigSpan>{ token }</BigSpan>\n      );\n    }).flat();\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport yaml from 'js-yaml';\nimport YouTube from 'react-youtube';\n\nimport {SpeechRecognizer} from './SpeechRecognizer';\nimport {KanjiDic} from './KanjiDic';\nimport xhr from './http';\nimport data from './data/data.yaml';\n\nconst Container = styled.div`\n  @media screen and (min-width: 60rem) {\n  width: 60rem;\n  margin: 0 auto;\n  }\n`;\n\nconst ListenContainer = styled.span``;\n\nconst Title = styled.h1`\n  padding-left: 1rem;\n  font-size: 1.5em;\n  color: orangered;\n`;\n\nconst BigButton = styled.button`\n  font-size: 2rem;\n  width: 100%;\n`;\n\nconst HalfButton = styled.button`\n  font-size: 2rem;\n  width: 50%;\n`;\n\n// @types/youtube won't let me refer to their const enum PlayerState\n// directly, so I have to recreate its values here\n//const PlayerStateUnstarted = -1;\n//const PlayerStateEnded = 0;\nconst PlayerStatePlaying = 1;\n//const PlayerStatePaused = 2;\n//const PlayerStateBuffering = 3;\n//const PlayerStateCued = 4;\n\ninterface Video {\n  series: string;\n  lesson: number;\n  name: string;\n  author: string;\n  src: string;\n  startTime: number;\n  stopTimes: number[];\n}\n\nconst firstVideo = {\n  series: 'Complete Beginners',\n  lesson: 1,\n  name: 'Chickens and Names',\n  author: 'Japanese Immersion with Asami',\n  src: 'FsiAxc5T23g',\n  startTime: 70,\n  stopTimes: [\n    165,\n    178\n  ]\n};\n\ninterface Data {\n  videos: Video[];\n}\n\ninterface AppState {\n  player?: YT.Player;\n  timer?: any;\n  video: number;\n  data: Data;\n\n  isListening: boolean;\n  lastListenResults: string[];\n};\n\nexport default class App extends React.Component<{},AppState> {\n  private recognizer?: SpeechRecognizer;\n  private kanjiDic = new KanjiDic();\n  private mounted: boolean = false;\n\n  constructor(props: {}) {\n    super(props);\n    console.log('new App()');\n\n    // Start async get call\n    xhr('GET', data).then((req) => {\n      const data = yaml.load(req.response);\n      if (this.mounted) {\n        this.setState({data:data});\n      } else {\n        this.state = {\n          video: 0,\n          data: data,\n          isListening: false,\n          lastListenResults: [],\n        };\n      }\n    }).catch((err) => console.error(err));\n\n    this.state = {\n      video: 0,\n      data: {\n        videos: [firstVideo],\n      },\n      isListening: false,\n      lastListenResults: [],\n    };\n\n    if (SpeechRecognizer.isPossible()) {\n      this.recognizer = new SpeechRecognizer((event) => this.listenCallback(event));\n    }\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  play() {\n    this.state.player?.playVideo();\n    this.forceUpdate();\n  }\n\n  pause() {\n    this.state.player?.pauseVideo();\n    this.forceUpdate();\n  }\n\n  listenCallback(event: SpeechRecognitionEvent) {\n    if (event.results.length > 0) {\n      const listenResults = Array.from(event.results[0]).map((x: SpeechRecognitionAlternative) => {\n        return x.transcript;\n      });\n      this.setState({lastListenResults: listenResults});\n    }\n  }\n\n  listen() {\n    this.recognizer?.start();\n    this.setState({isListening: this.recognizer?.hasStarted() || false});\n  }\n\n  getNextStopTime() {\n    const time = this.state.player?.getCurrentTime() || 0;\n    const maxTime = this.state.player?.getDuration() || 0;\n    const video = this.state.data.videos[this.state.video] || firstVideo;\n    for (let stopTime of video.stopTimes) {\n      if (time < stopTime) {\n        return stopTime;\n      }\n    }\n    return maxTime;\n  }\n\n  onPlayerStateChange(event: YT.OnStateChangeEvent) {\n    if (this.state.timer) {\n      clearTimeout(this.state.timer);\n    }\n    if (event.data === PlayerStatePlaying) {\n      const time = this.state.player?.getCurrentTime() || 0;\n      const nextStop = this.getNextStopTime();\n      // Add .4 of a second to the time in case it's close to the current time\n      // (The API kept returning ~9.7 when hitting play after stopping at 10s)\n      if (time + .4 < nextStop) {\n        const rate = this.state.player?.getPlaybackRate() || 1;\n        const remainingTime = (nextStop - time) / rate;\n        this.setState({timer: setTimeout(() => this.pause(), remainingTime * 1000)});\n      }\n    } else {\n      this.setState({timer: null});\n    }\n  }\n\n  onPlayerReady(event: YT.PlayerEvent) {\n    this.setState({player: event.target});\n  }\n\n  renderContinueButton() {\n    let label = 'Continue ->';\n    let onClick = () => this.play();\n    if (this.state.player?.getPlayerState() === PlayerStatePlaying) {\n      label = 'Pause ||';\n      onClick = () => this.pause();\n    }\n    return (\n      <BigButton onClick={onClick}>\n        { label }\n      </BigButton>\n    );\n  }\n\n  renderListener() {\n    if (!this.recognizer) {\n      return (<span></span>);\n    }\n    const phrases = this.state.lastListenResults.map((phrase) => {\n      return (\n        <BigButton key={phrase} onClick={() => this.setState({lastListenResults:[phrase]})}>\n          { this.kanjiDic.makePhrase(phrase) }\n        </BigButton>\n      );\n    });\n    const listenLabel = this.recognizer.hasStarted() ?\n                        'Stop Listening' : 'Start Listening';\n    return (\n      <ListenContainer>\n        <BigButton onClick={() => this.listen() }>\n          { listenLabel }\n        </BigButton>\n        { phrases }\n      </ListenContainer>\n    );    \n  }\n\n  prevVideo() {\n    if (this.state.video - 1 < 0) return;\n    this.setState({video: this.state.video - 1});\n  }\n\n  nextVideo() {\n    if (this.state.video + 1 >= this.state.data.videos.length) return;\n    this.setState({video: this.state.video + 1});\n  }\n\n  render() {\n    const zero: 0 | 1 | undefined = 0;\n    const video = this.state.data.videos[this.state.video] || firstVideo;\n    const opts = {\n      width: '960',\n      height: '473',\n      playerVars: {\n        autoplay: zero,\n        controls: zero,\n        start: video.startTime,\n      },\n    };\n\n    return (\n      <Container>\n        <header>\n          <Title>\n            T.P.R.S. 日本語\n          </Title>\n        </header>\n        <YouTube videoId={video.src} opts={opts}\n                 onStateChange={(event: YT.OnStateChangeEvent) => this.onPlayerStateChange(event) }\n                 onReady={(event: YT.PlayerEvent) => this.onPlayerReady(event)} />\n        <HalfButton onClick={() => this.prevVideo() }>Previous</HalfButton>\n        <HalfButton onClick={() => this.nextVideo() }>Next</HalfButton>\n        { this.renderContinueButton() }\n        { this.renderListener() }\n      </Container>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}